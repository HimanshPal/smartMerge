// Code generated by protoc-gen-go.
// source: dc-smartMerge.proto
// DO NOT EDIT!

/*
Package proto is a generated protocol buffer package.

It is generated from these files:
	dc-smartMerge.proto

It has these top-level messages:
	State
	WriteReply
	ReadRequest
	ReadNRequest
	WriteNAck
	Blueprint
	ReadNReply
*/
package proto

import proto1 "github.com/golang/protobuf/proto"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal

type State struct {
	Value     []byte `protobuf:"bytes,1,opt,proto3" json:"Value,omitempty"`
	Timestamp int64  `protobuf:"varint,2,opt" json:"Timestamp,omitempty"`
}

func (m *State) Reset()         { *m = State{} }
func (m *State) String() string { return proto1.CompactTextString(m) }
func (*State) ProtoMessage()    {}

type WriteReply struct {
	New bool `protobuf:"varint,1,opt" json:"New,omitempty"`
}

func (m *WriteReply) Reset()         { *m = WriteReply{} }
func (m *WriteReply) String() string { return proto1.CompactTextString(m) }
func (*WriteReply) ProtoMessage()    {}

type ReadRequest struct {
}

func (m *ReadRequest) Reset()         { *m = ReadRequest{} }
func (m *ReadRequest) String() string { return proto1.CompactTextString(m) }
func (*ReadRequest) ProtoMessage()    {}

type ReadNRequest struct {
}

func (m *ReadNRequest) Reset()         { *m = ReadNRequest{} }
func (m *ReadNRequest) String() string { return proto1.CompactTextString(m) }
func (*ReadNRequest) ProtoMessage()    {}

type WriteNAck struct {
}

func (m *WriteNAck) Reset()         { *m = WriteNAck{} }
func (m *WriteNAck) String() string { return proto1.CompactTextString(m) }
func (*WriteNAck) ProtoMessage()    {}

type Blueprint struct {
	Add []uint32 `protobuf:"varint,1,rep" json:"Add,omitempty"`
	Rem []uint32 `protobuf:"varint,2,rep" json:"Rem,omitempty"`
}

func (m *Blueprint) Reset()         { *m = Blueprint{} }
func (m *Blueprint) String() string { return proto1.CompactTextString(m) }
func (*Blueprint) ProtoMessage()    {}

type ReadNReply struct {
	Next []*Blueprint `protobuf:"bytes,1,rep" json:"Next,omitempty"`
}

func (m *ReadNReply) Reset()         { *m = ReadNReply{} }
func (m *ReadNReply) String() string { return proto1.CompactTextString(m) }
func (*ReadNReply) ProtoMessage()    {}

func (m *ReadNReply) GetNext() []*Blueprint {
	if m != nil {
		return m.Next
	}
	return nil
}

func init() {
}

// Client API for Register service

type RegisterClient interface {
	ReadS(ctx context.Context, in *ReadRequest, opts ...grpc.CallOption) (*State, error)
	WriteS(ctx context.Context, in *State, opts ...grpc.CallOption) (*WriteReply, error)
	ReadN(ctx context.Context, in *ReadNRequest, opts ...grpc.CallOption) (*ReadNReply, error)
	WriteN(ctx context.Context, in *Blueprint, opts ...grpc.CallOption) (*WriteNAck, error)
}

type registerClient struct {
	cc *grpc.ClientConn
}

func NewRegisterClient(cc *grpc.ClientConn) RegisterClient {
	return &registerClient{cc}
}

func (c *registerClient) ReadS(ctx context.Context, in *ReadRequest, opts ...grpc.CallOption) (*State, error) {
	out := new(State)
	err := grpc.Invoke(ctx, "/proto.Register/ReadS", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registerClient) WriteS(ctx context.Context, in *State, opts ...grpc.CallOption) (*WriteReply, error) {
	out := new(WriteReply)
	err := grpc.Invoke(ctx, "/proto.Register/WriteS", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registerClient) ReadN(ctx context.Context, in *ReadNRequest, opts ...grpc.CallOption) (*ReadNReply, error) {
	out := new(ReadNReply)
	err := grpc.Invoke(ctx, "/proto.Register/ReadN", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registerClient) WriteN(ctx context.Context, in *Blueprint, opts ...grpc.CallOption) (*WriteNAck, error) {
	out := new(WriteNAck)
	err := grpc.Invoke(ctx, "/proto.Register/WriteN", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Register service

type RegisterServer interface {
	ReadS(context.Context, *ReadRequest) (*State, error)
	WriteS(context.Context, *State) (*WriteReply, error)
	ReadN(context.Context, *ReadNRequest) (*ReadNReply, error)
	WriteN(context.Context, *Blueprint) (*WriteNAck, error)
}

func RegisterRegisterServer(s *grpc.Server, srv RegisterServer) {
	s.RegisterService(&_Register_serviceDesc, srv)
}

func _Register_ReadS_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(ReadRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(RegisterServer).ReadS(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Register_WriteS_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(State)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(RegisterServer).WriteS(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Register_ReadN_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(ReadNRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(RegisterServer).ReadN(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Register_WriteN_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(Blueprint)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(RegisterServer).WriteN(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _Register_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Register",
	HandlerType: (*RegisterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReadS",
			Handler:    _Register_ReadS_Handler,
		},
		{
			MethodName: "WriteS",
			Handler:    _Register_WriteS_Handler,
		},
		{
			MethodName: "ReadN",
			Handler:    _Register_ReadN_Handler,
		},
		{
			MethodName: "WriteN",
			Handler:    _Register_WriteN_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}
